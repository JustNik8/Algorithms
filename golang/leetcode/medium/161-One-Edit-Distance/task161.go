package main

// IsOneEditDistance проверяется что редакционное расстояние между строками == 1
func IsOneEditDistance(s string, t string) bool {
	// В s храним наибольшую по длинне строку.
	if len(s) < len(t) {
		s, t = t, s
	}

	// Если разница в длиннах больше 1, то сразу ясно, что редакционное расстояние != 1
	n, m := len(s), len(t)
	if n-m > 1 {
		return false
	}

	// Запускаем цикл по длинне наименьшей строки
	for i := 0; i < m; i++ {
		// Если текущие буквы не равны, то есть 2 варианта
		if s[i] != t[i] {
			// 1. Если длинна строк равна, то значит только замена возможна
			// Поэтому проверяем последующие буквы
			if n == m {
				return s[i+1:] == t[i+1:]
			}
			// Если же расстояния не равны, то мы не можем заменить букву =>
			// Нужно ее удалять и проверять остальные буквы
			return s[i+1:] == t[i:]
		}
	}

	// Если же так получилось, что все буквы равны, то остается последний вариант:
	// Добавление буквы. Так как по условию строки с одинаковой длинной должны возвращать false,
	// То нужно проверить, t меньше s на единицу.
	return n == m+1
}
